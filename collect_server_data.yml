---
- hosts: all
  remote_user: "{{ lookup('env','USER') }}"
  become: true
  become_user: root
  gather_facts: True
  vars:    
    file_name: /var/data/server_data
  tasks:
    - name: "Getting current timestamp"
      tags: "rerun"
      set_fact:
        timestamp_fact: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
        timestamp_0: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"

    - name: Create directory according to the environment
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}"
        state: directory
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Check the service status
      tags: "service"
      shell: "service --status-all"
      register: serstatus

    - name: Create a file service.
      tags: "service"
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/services.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the  output to the newly created file
      tags: "service"
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/services.txt"
        line: "{{ serstatus.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Check the Installed RPM packages Info
      shell: "rpm -qa"
      register: rpminfo

    - name: Create a file rpm info.
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/rpminfo.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the  output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/rpminfo.txt"
        line: "{{ rpminfo.stdout }}"
      delegate_to: "127.0.0.1"    

    - name: Check Redhat cluster status
      command: clustat
      register: red_cluster
      ignore_errors: true

    - name: Create a file to save cluster output
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/Redht_cluster.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"
      when: red_cluster.rc == 0

    - name: Copy the VCS cluster output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/Redht_cluster.txt"
        line: "{{ red_cluster.stdout }}"
      delegate_to: "127.0.0.1"
      when: red_cluster.rc == 0

    - name: Get server boot time
      command: uptime
      register: server_uptime

    - name: Create a file to save the kernal and boot time output
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/server_uptime.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output of Kernal and boot time to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/server_uptime.txt"
        line: "{{ server_uptime.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Checking the server IP
      shell: "ifconfig -a"
      register: net_route

    - name: Checking the route table
      shell: "netstat -rn"
      register: rout

    - name: Create a file to save the Networking IP and route table Info
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/networking.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output of networking to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/networking.txt"
        line: "{{ net_route.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Copy the output of Route Table to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/networking.txt"
        line: "{{ rout.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Create a directory to save the disk information
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk"
        state: directory
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Get Disk FS
      shell: "df -hP"
      register: dfs

    - name: Create a file inside Disk folder to save the disk info
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/disk_fs.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the Disk output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/disk_fs.txt"
        line: "{{ dfs.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Get fstab entries
      shell: "cat /etc/fstab"
      register: fstinfo

    - name: Create a file inside Disk folder to save the fstab info
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/fstabinfo.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the fstab output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/fstabinfo.txt"
        line: "{{ fstinfo.stdout }}"
      delegate_to: "127.0.0.1"

    - name: List of block devices
      command: lsblk
      register: blkdev
      ignore_errors: true
      delegate_to: "127.0.0.1"

    - name: Create a file to save blkdev output
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/block_devices.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the Disk output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/block_devices.txt"
        line: "{{ blkdev.stdout }}"
      delegate_to: "127.0.0.1"

    - name: List of Volume Groups
      shell: pvs
      register: lvm_out
      delegate_to: "127.0.0.1"

    - name: Create a file inside Disk folder to save lvm info
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/lvm_out.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/lvm_out.txt"
        line: "{{ lvm_out.stdout }}"
      delegate_to: "127.0.0.1" 

    - name: Check the NFS
      shell: mount -l | grep nfs
      register: nfs

    - name: Create a file to save the output of NFS.
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/NFS_automnt_output.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output of NFS and automount to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/disk/NFS_automnt_output.txt"
        line: "{{ nfs.stdout }}"
      delegate_to: "127.0.0.1"

    - name: Create a log directory
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/log"
        state: directory
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: check host entries
      shell: "cat /etc/hosts"
      register: hostentries

    - name: Create a file to save the output of hostentries.
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/log/host_entries.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output hosts to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/log/host_entries.txt"
        line: "{{ hostentries.stdout }}"
      delegate_to: "127.0.0.1"

    - name: check sysconfig_network
      shell: "cat /etc/sysconfig/network"
      register: sysnetwork

    - name: Create a file to save the output of sysconfig_network.
      file:
        path: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/log/sysconfig_network.txt"
        state: touch
        mode: 0755
      delegate_to: "127.0.0.1"

    - name: Copy the output of network to the newly created file
      lineinfile:
        dest: "{{ file_name }}/{{ timestamp_0 }}/{{ inventory_hostname + '_' + timestamp_fact }}/log/sysconfig_network.txt"
        line: "{{ sysnetwork.stdout }}"
      delegate_to: "127.0.0.1"    
